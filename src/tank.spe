with System do
    deadlock := any_s - src(any_t - self_epsilon);
    notResetable := any_s - coreach(initial, any_t);
    /* Niveaux critiques et situations redoutées */
    NC := any_s & [T.level=0 | T.level=4];
    SR := NC | deadlock;
    /* Syst d'equation au point fixe pour la synthèse du controleur
     * CGagnant = (any_s - SR) & src(CCoupGagnant)
     * CCoupGagnant = CCoup & rtgt(EPerdant)
     * EPerdant = (any_s - SR) & (src(ECoupPerdant) - src(ECoupNonPerdant))
     * ECoupPerdant = ECoup & rtgt(CGagnant)
     * ECoupNonPerdant = ECoup & rtgt(any_s - CGagnant)
     */

     /* Les constantes */
     CCoup := any_t & label cmd;
     ECoup := any_t & label env;
     CCoupGagnant -= CCoup & rtgt((any_s - SR) &
                     (src(ECoup & rtgt((any_s - SR) & src(CCoupGagnant))) -
                      src(ECoup & rtgt(any_s - ((any_s - SR) &
                                                src(CCoupGagnant))))));

     /* Le controleur peut-il controler ? */
     CtrlCanControl := rsrc(initial) & CCoupGagnant;
     /* Calcul du controleur */
     project(any_s, (empty_t, CCoupGagnant), 'CtrlUn', true, C) > 'CtrlUn.alt';
        

done
