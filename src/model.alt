node Valve
    state
        flow : [0,2] : public;
        broken : bool;
    init
        flow := 0;
        broken := false;
    event
        inc, dec : public;
    trans
        ~broken |- inc -> flow := flow+1;
        ~broken |- dec -> flow := flow-1;
        ~broken |- inc -> broken := true;
        ~broken |- dec -> broken := true;
        broken |- inc ->;
        broken |- dec ->;
edon

node Tank
    state
        level : [0,4] : public;
    init
        level := 2;
    flow
        amont : [0,4];
        aval: [0,2];
    event
        time
    trans
        amont > aval |- time -> level : level+1;
        amont < aval |- time -> level : level-1;
        (amont = aval) & (amont = 0) |- time ->;
        (amont = aval) & (amont > 0) |- time ->;
        (amont = aval) & (amont > 0) |- time -> level : level+1;
        (amont = aval) & (amont > 0) |- time -> level : level-1;
edon

node Ctrl

edon

node System
    sub
        T : Tank;
        C : Ctrl;
        V : Valve[3];
    assert
        T.amont := (V[0].flow + V[1].flow);
        T.aval := V[2].flow;
    state
        ctrl : bool;
    init
        ctrl := true;
    event
        cmd, env;
    trans
        ctrl |- cmd -> ctrl := ~ctrl;
        ~ctrl |- env -> ctrl := ~ctrl;
    sync
        //evolution de l'environnement
        <env, T.time>;
        //les commandes
        <cmd, V[0].dec, V[1].dec, V[2].dec>;
        <cmd, V[0].inc, V[1].inc, V[2].inc>;
        <cmd, V[0].dec, V[1].dec>;

edon
